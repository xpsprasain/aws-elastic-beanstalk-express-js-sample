pipeline {
  agent any

  environment {
    // ---- image coordinates ----
    REGISTRY_NS = 'docker.io/xpsprasain'          
    IMAGE       = 'eb-express-ci'                 
    TAG         = "b${env.BUILD_NUMBER}"

    // ---- talk to Docker-in-Docker from Task 2 ----
    DOCKER_HOST       = 'tcp://dind:2376'         
    DOCKER_TLS_VERIFY = '1'
    DOCKER_CERT_PATH  = '/certs/client'
  }

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '25'))
  }

  stages {

    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Dependencies (Node 16)') {
      steps {
        sh '''
          docker run --rm \
            -u 0:0 \
            -v "$WORKSPACE":/ws \
            -v "$WORKSPACE/.npm":/root/.npm \
            -w /ws \
            node:16 sh -lc '
              node -v && npm -v
              (npm ci || npm install --save)
            '
        '''
      }
    }

    stage('Unit Tests (Node 16)') {
      steps {
        sh '''
          docker run --rm \
            -u 0:0 \
            -v "$WORKSPACE":/ws \
            -w /ws \
            node:16 sh -lc "
              npm test --if-present || echo 'no tests or tests failed; continuing for assignment'
            "
        '''
      }
    }

    stage('Dependency Scan (Snyk)') {
      steps {
        withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
          sh '''
            docker run --rm \
              -u 0:0 \
              -v "$WORKSPACE":/ws \
              -w /ws \
              node:16 sh -lc "
                npm install --save
                npm install -g snyk
                snyk auth $SNYK_TOKEN
                # exits non-zero if High/Critical found -> pipeline fails (required)
                snyk test --severity-threshold=high
              "
          '''
        }
      }
      post {
        always {
          // optional JSON for your report
          sh '''
            set +e
            docker run --rm -u 0:0 -v "$WORKSPACE":/ws -w /ws node:16 sh -lc "
              npm install -g snyk && snyk test --severity-threshold=high --json > snyk-report.json || true
            "
          '''
          archiveArtifacts artifacts: 'snyk-report.json', fingerprint: true, onlyIfSuccessful: false
        }
      }
    }

    stage('Build Image') {
      environment { DOCKER_BUILDKIT = '1' }
      steps {
        sh '''
          docker version
          docker build -t $REGISTRY_NS/$IMAGE:$TAG .
          docker tag  $REGISTRY_NS/$IMAGE:$TAG $REGISTRY_NS/$IMAGE:latest
        '''
      }
    }

    stage('Push Image') {
      steps {
        // change credentialsId to your Jenkins creds id (e.g., dockerhub-creds)
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $REGISTRY_NS/$IMAGE:$TAG
            docker push $REGISTRY_NS/$IMAGE:latest
          '''
        }
      }
    }
  }

  post {
    always {
      // collect JUnit if present; don’t fail if missing
      junit testResults: '**/test-results/*.xml', allowEmptyResults: true
      archiveArtifacts artifacts: 'Dockerfile', allowEmptyArchive: true
    }
    success { echo "Built & pushed $REGISTRY_NS/$IMAGE:$TAG" }
    failure { echo "Build failed — check the failing stage log." }
  }
}
