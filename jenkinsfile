pipeline {
  agent any

  // Global env so every 'docker' call talks to your DinD over TLS
  environment {
    REGISTRY_NS       = 'docker.io/xpsprasain'       
    IMAGE             = 'aws-eb-express'              
    TAG               = "${env.BUILD_NUMBER}"

    DOCKER_HOST       = 'tcp://docker:2376'           
    DOCKER_TLS_VERIFY = '1'
    DOCKER_CERT_PATH  = '/certs/client'
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '25'))
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
        sh 'ls -la | head'    // sanity: should list package.json here
      }
    }

    stage('Prep base image (optional speed-up)') {
      steps {
        sh 'docker pull node:16-alpine || true'
      }
    }

    stage('Install dependencies (Node 16)') {
      options { timeout(time: 10, unit: 'MINUTES') }
      steps {
        sh '''
          docker run --rm -u 0:0 \
            -v "$WORKSPACE":/workspace \
            -v "$WORKSPACE/.npm":/root/.npm \
            -w /workspace node:16-alpine sh -lc '
              node -v
              npm -v
              (npm ci || npm install --save)
            '
        '''
      }
    }

    stage('Unit tests (Node 16)') {
      steps {
        sh '''
          docker run --rm -u 0:0 \
            -v "$WORKSPACE":/workspace \
            -w /workspace node:16-alpine sh -lc "
              npm test --if-present || echo 'no tests; continuing'
            "
        '''
      }
      post {
        always {
          junit testResults: '**/test-results/*.xml', allowEmptyResults: true
        }
      }
    }

    stage('Dependency security scan (Snyk)') {
      steps {
        withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
          sh '''
            docker run --rm -u 0:0 \
              -v "$WORKSPACE":/workspace \
              -w /workspace node:16-alpine sh -lc "
                npm install --save
                npm install -g snyk
                snyk auth $SNYK_TOKEN
                # Fails pipeline on High/Critical (assignment requirement)
                snyk test --severity-threshold=high
              "
          '''
        }
      }
      post {
        always {
          // optional artifact for your report
          sh '''
            set +e
            docker run --rm -u 0:0 -v "$WORKSPACE":/workspace -w /workspace node:16-alpine sh -lc "
              npm install -g snyk && snyk test --severity-threshold=high --json > snyk-report.json || true
            "
          '''
          archiveArtifacts artifacts: 'snyk-report.json', fingerprint: true, onlyIfSuccessful: false
        }
      }
    }

    stage('Build Docker image') {
      environment { DOCKER_BUILDKIT = '1' }
      steps {
        sh '''
          docker version
          docker build -t $REGISTRY_NS/$IMAGE:$TAG .
          docker tag  $REGISTRY_NS/$IMAGE:$TAG $REGISTRY_NS/$IMAGE:latest
        '''
      }
    }

    stage('Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $REGISTRY_NS/$IMAGE:$TAG
            docker push $REGISTRY_NS/$IMAGE:latest
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'Dockerfile', allowEmptyArchive: true
    }
    success { echo "✅ Built & pushed $REGISTRY_NS/$IMAGE:$TAG" }
    failure { echo "❌ Build failed — check the failing stage’s console log." }
  }
}

