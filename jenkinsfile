pipeline {
  agent any

  environment {
    // Docker Hub
    REGISTRY_NS       = 'xpsprasain/aws-elastic-beanstalk-express-js-sample'
    IMAGE             = 'eb-express-ci'
    TAG               = "b${env.BUILD_NUMBER}"

    // App repo to build
    APP_REPO_URL      = 'https://github.com/xpsprasain/aws-elastic-beanstalk-express-js-sample.git'
    APP_BRANCH        = 'main'

    // DinD over TLS (service must be reachable as 'docker')
    DOCKER_HOST       = 'tcp://docker:2376'
    DOCKER_TLS_VERIFY = '1'
    DOCKER_CERT_PATH  = '/certs/client'
  }

  options { timestamps(); buildDiscarder(logRotator(numToKeepStr: '25')) }

  stages {
    stage('Checkout APP into app/') {
      steps {
        deleteDir()
        dir('app') {
          git url: "${APP_REPO_URL}", branch: "${APP_BRANCH}", changelog: false, poll: false
        }
        sh '''
          echo "Workspace:"; ls -la | head
          echo "app/:";      ls -la app | head
          test -f app/package.json || { echo "ERROR: app/package.json missing"; exit 2; }
        '''
      }
    }

    stage('Sanity shell') {
      steps {
        sh 'set -x; echo hello-from-jenkins-shell; whoami; uname -a'
      }
    }

    stage('Prep base image (optional)') {
      steps { sh 'docker pull node:16-alpine || true' }
    }

    stage('Install & Test (Node 16)') {
      steps {
        sh '''
          docker run --rm -u 0:0 \
            -v "$WORKSPACE/app":/workspace \
            -v "$WORKSPACE/.npm":/root/.npm \
            -w /workspace node:16-alpine sh -lc '
              node -v; npm -v;
              if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
                npm ci
              else
                npm install --save
              fi
              npm test --if-present || echo "no tests; continuing"
            '
        '''
      }
      post { always { junit testResults: '**/test-results/*.xml', allowEmptyResults: true } }
    }

    stage('Snyk Scan (fail on High/Critical)') {
      steps {
        withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
          sh '''
            docker run --rm -u 0:0 \
              -v "$WORKSPACE/app":/workspace \
              -w /workspace node:16-alpine sh -lc "
                npm install --save
                npm install -g snyk
                snyk auth $SNYK_TOKEN
                snyk test --severity-threshold=high
              "
          '''
        }
      }
      post {
        always {
          sh '''
            set +e
            docker run --rm -u 0:0 \
              -v "$WORKSPACE/app":/workspace \
              -w /workspace node:16-alpine sh -lc "
                npm install -g snyk &&
                snyk test --severity-threshold=high --json > snyk-report.json || true
              "
          '''
          archiveArtifacts artifacts: 'snyk-report.json', fingerprint: true, onlyIfSuccessful: false
        }
      }
    }

    stage('Build Image') {
      environment { DOCKER_BUILDKIT = '1' }
      steps {
        sh '''
          if [ ! -f app/Dockerfile ]; then
            cat > app/Dockerfile <<'EOF'
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production || npm install --only=production
COPY . .
EXPOSE 8080
CMD ["npm","start"]
EOF
          fi

          docker version
          docker build -t $REGISTRY_NS/$IMAGE:$TAG -f app/Dockerfile app
          docker tag  $REGISTRY_NS/$IMAGE:$TAG $REGISTRY_NS/$IMAGE:latest
        '''
      }
    }

    stage('Login & Push to Registry') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $REGISTRY_NS/$IMAGE:$TAG
            docker push $REGISTRY_NS/$IMAGE:latest
          '''
        }
      }
    }
  }

  post {
    always { archiveArtifacts artifacts: 'app/Dockerfile', allowEmptyArchive: true }
    success { echo "✅ Built & pushed $REGISTRY_NS/$IMAGE:$TAG" }
    failure { echo "❌ Build failed — open the failing stage’s console log." }
  }
}

