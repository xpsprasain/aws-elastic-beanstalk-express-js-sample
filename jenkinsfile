pipeline {
  agent none

  environment {
    IMAGE_NAME = 'xpsprasain/aws-node-app'
    IMAGE_TAG  = 'latest'
  }

  stages {
    stage('Checkout') {
      agent any
      steps { checkout scm }
    }

    stage('Install & Test (Node 16)') {
      // Node 16 build agent as required by the assignment
      agent { docker { image 'node:16' } }
      steps {
        sh '''
          node -v
          npm -v
          npm install --save
          # Continue even if there are no tests in the sample app
          npm test || echo "Tests missing/failing - continuing for assignment flow"
        '''
      }
      post {
        always {
          junit '**/test-results/*.xml', allowEmptyResults: true
        }
      }
    }

    stage('Security Scan (Snyk)') {
      // Fails build if High/Critical vulns exist
      agent { docker { image 'node:16' } }
      steps {
        withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
          sh '''
            npm install -g snyk
            snyk auth "$SNYK_TOKEN"
            snyk test --severity-threshold=high
          '''
        }
      }
    }

    stage('Build Docker Image') {
      // Build via Docker CLI, talking to DinD over TLS
      agent {
        docker {
          image 'docker:27-cli'
          args '''
            -v /certs/client:/certs/client:ro
            -e DOCKER_HOST=tcp://dind:2376
            -e DOCKER_TLS_VERIFY=1
            -e DOCKER_CERT_PATH=/certs/client
          '''
        }
      }
      steps {
        sh 'docker version'
        sh 'docker build -t $IMAGE_NAME:$IMAGE_TAG .'
      }
    }

    stage('Push to Registry') {
      agent {
        docker {
          image 'docker:27-cli'
          args '''
            -v /certs/client:/certs/client:ro
            -e DOCKER_HOST=tcp://dind:2376
            -e DOCKER_TLS_VERIFY=1
            -e DOCKER_CERT_PATH=/certs/client
          '''
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:$IMAGE_TAG
          '''
        }
      }
    }
  }

  post {
    success { echo '✅ CI done: install, test, security scan, build & push complete.' }
    failure { echo '❌ CI failed — check stage logs above.' }
  }
}
